#pragma once

namespace COLORS {

enum ColorName {
	Aquamarine,
	BakersChocolate,
	Black,
	Blue,
	BlueViolet,
	Brass,
	BrightGold,
	Brown,
	Bronze,
	BronzeII,
	CadetBlue,
	CoolCopper,
	Copper,
	Coral,
	CornFlowerBlue,
	Cyan,
	DarkBrown,
	DarkGreen,
	DarkGreenCopper,
	DarkOliveGreen,
	DarkOrchid,
	DarkPurple,
	DarkSlateBlue,
	DarkSlateGrey,
	DarkTan,
	DarkTurquoise,
	DarkWood,
	DimGrey,
	DustyRose,
	Feldspar,
	Firebrick,
	ForestGreen,
	Gold,
	Goldenrod,
	Grey,
	Green,
	GreenCopper,
	GreenYellow,
	HunterGreen,
	IndianRed,
	Khaki,
	LightBlue,
	LightGrey,
	LightSteelBlue,
	LightWood,
	LimeGreen,
	Magenta,
	MandarianOrange,
	Maroon,
	MediumAquamarine,
	MediumBlue,
	MediumForestGreen,
	MediumGoldenrod,
	MediumOrchid,
	MediumSeaGreen,
	MediumSlateBlue,
	MediumSpringGreen,
	MediumTurquoise,
	MediumVioletRed,
	MediumWood,
	MidnightBlue,
	NavyBlue,
	NeonBlue,
	NeonPink,
	NewMidnightBlue,
	NewTan,
	OldGold,
	Orange,
	OrangeRed,
	Orchid,
	PaleGreen,
	Pink,
	Plum,
	Quartz,
	Red,
	RichBlue,
	Salmon,
	Scarlet,
	SeaGreen,
	SemiSweetChocolate,
	Sienna,
	Silver,
	SkyBlue,
	SlateBlue,
	SpicyPink,
	SpringGreen,
	SteelBlue,
	SummerSky,
	Tan,
	Thistle,
	Turquoise,
	VeryDarkBrown,
	VeryLightGrey,
	Violet,
	VioletRed,
	Wheat,
	White,
	Yellow,
	YellowGreen,
	DarkYellow,
	Gray
};

typedef unsigned char _RGB[3];

static const _RGB RGB[] = { { 0x70, 0xDB, 0x93 }, { 0x5C, 0x33, 0x17 }, { 0x00,
		0x00, 0x00 }, { 0x00, 0x00, 0xFF }, { 0x9F, 0x5F, 0x9F }, { 0xB5, 0xA6,
		0x42 }, { 0xD9, 0xD9, 0x19 }, { 0xA6, 0x2A, 0x2A },
		{ 0x8C, 0x78, 0x53 }, { 0xA6, 0x7D, 0x3D }, { 0x5F, 0x9F, 0x9F }, {
				0xD9, 0x87, 0x19 }, { 0xB8, 0x73, 0x33 }, { 0xFF, 0x7F, 0x00 },
		{ 0x42, 0x42, 0x6F }, { 0x00, 0xFF, 0xFF }, { 0x5C, 0x40, 0x33 }, {
				0x2F, 0x4F, 0x2F }, { 0x4A, 0x76, 0x6E }, { 0x4F, 0x4F, 0x2F },
		{ 0x99, 0x32, 0xCD }, { 0x87, 0x1F, 0x78 }, { 0x6B, 0x23, 0x8E }, {
				0x2F, 0x4F, 0x4F }, { 0x97, 0x69, 0x4F }, { 0x70, 0x93, 0xDB },
		{ 0x85, 0x5E, 0x42 }, { 0x54, 0x54, 0x54 }, { 0x85, 0x63, 0x63 }, {
				0xD1, 0x92, 0x75 }, { 0x8E, 0x23, 0x23 }, { 0x23, 0x8E, 0x23 },
		{ 0xCD, 0x7F, 0x32 }, { 0xDB, 0xDB, 0x70 }, { 0xC0, 0xC0, 0xC0 }, {
				0x00, 0xFF, 0x00 }, { 0x52, 0x7F, 0x76 }, { 0x93, 0xDB, 0x70 },
		{ 0x21, 0x5E, 0x21 }, { 0x4E, 0x2F, 0x2F }, { 0x9F, 0x9F, 0x5F }, {
				0xC0, 0xD9, 0xD9 }, { 0xA8, 0xA8, 0xA8 }, { 0x8F, 0x8F, 0xBD },
		{ 0xE9, 0xC2, 0xA6 }, { 0x32, 0xCD, 0x32 }, { 0xFF, 0x00, 0xFF }, {
				0xE4, 0x78, 0x33 }, { 0x8E, 0x23, 0x6B }, { 0x32, 0xCD, 0x99 },
		{ 0x32, 0x32, 0xCD }, { 0x6B, 0x8E, 0x23 }, { 0xEA, 0xEA, 0xAE }, {
				0x93, 0x70, 0xDB }, { 0x42, 0x6F, 0x42 }, { 0x7F, 0x00, 0xFF },
		{ 0x7F, 0xFF, 0x00 }, { 0x70, 0xDB, 0xDB }, { 0xDB, 0x70, 0x93 }, {
				0xA6, 0x80, 0x64 }, { 0x2F, 0x2F, 0x4F }, { 0x23, 0x23, 0x8E },
		{ 0x4D, 0x4D, 0xFF }, { 0xFF, 0x6E, 0xC7 }, { 0x00, 0x00, 0x9C }, {
				0xEB, 0xC7, 0x9E }, { 0xCF, 0xB5, 0x3B }, { 0xFF, 0x7F, 0x00 },
		{ 0xFF, 0x24, 0x00 }, { 0xDB, 0x70, 0xDB }, { 0x8F, 0xBC, 0x8F }, {
				0xBC, 0x8F, 0x8F }, { 0xEA, 0xAD, 0xEA }, { 0xD9, 0xD9, 0xF3 },
		{ 0xFF, 0x00, 0x00 }, { 0x59, 0x59, 0xAB }, { 0x6F, 0x42, 0x42 }, {
				0x8C, 0x17, 0x17 }, { 0x23, 0x8E, 0x68 }, { 0x6B, 0x42, 0x26 },
		{ 0x8E, 0x6B, 0x23 }, { 0xE6, 0xE8, 0xFA }, { 0x32, 0x99, 0xCC }, {
				0x00, 0x7F, 0xFF }, { 0xFF, 0x1C, 0xAE }, { 0x00, 0xFF, 0x7F },
		{ 0x23, 0x6B, 0x8E }, { 0x38, 0xB0, 0xDE }, { 0xDB, 0x93, 0x70 }, {
				0xD8, 0xBF, 0xD8 }, { 0xAD, 0xEA, 0xEA }, { 0x5C, 0x40, 0x33 },
		{ 0xCD, 0xCD, 0xCD }, { 0x4F, 0x2F, 0x4F }, { 0xCC, 0x32, 0x99 }, {
				0xD8, 0xD8, 0xBF }, { 0xFF, 0xFF, 0xFF }, { 0xFF, 0xFF, 0x00 },
		{ 0x99, 0xCC, 0x32 }, { 0x99, 0xCC, 0x32 }, { 0x48, 0x48, 0x48 } };

}
